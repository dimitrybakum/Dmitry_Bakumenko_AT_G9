задание по дженерикам:

- создать класс обобщенного типа GenericMethodsInGenericClassT<T> и в нем:
-- невозвратный метод genericMethodHalfGenArgs, принимающий аргумент переменного типа и печатающий в консоль фразу "I am an object of X class", где X - название класса передаваемого аргумента
-- метод genericMethodTwoGenArgs, принимающий 2 аргумента переменного типа и возвращающий строку "We are objects of X class and Y class", где X и Y - название классов передаваемых аргументов
-- невозвратный метод genericMethodHalfGenArgs, принимающий 1 аргумент переменного типа и второй аргумент типа String, и печатающий в консоль фразу "I got an object of X class and string with N characters", где X - название класса передаваемых аргументов, N - количество символов в переданной строке

- создать класс GenericMethodsInGenericClassTRunner с методом main и в нем:
-- создать обьекты типа GenericMethodsInGenericClassT<T> с параметрами типа String, Integer, Double и всеми типами, которые содержаться в пакете playground.essence
-- вызывать каждый из методов у каждого из обьектов, в случае, если метод возвратный - отпечатать возвращаемое им значение в консоль

- создать класс обобщенного типа GenericMethodsInGenericClassTwoParams<X, Y> и в нем:
-- перегруженный метод genericMethodGenArgs, принимающий 1 или 2 аргумента переменного типа и возвращающий строку "I received N arguments of type: X class, Y class", где N - количество полученных аргументов, X и Y - название классов передаваемых аргументов
-- перегруженный невозвратный метод genericMethodHalfGenArgs, принимающий 1 или 2 аргумента переменного типа и второй или третитй аргумент типа String, и печатающий в консоль фразу "I got an object of X class and Y class and string with N characters", где X - название класса передаваемых аргументов, N - количество символов в переданной строке, перегрузку метода сделать для вариантов параметров типа (X, String), (Y, String)
- создать класс GenericMethodsInGenericClassTwoParamsRunner с методом main и в нем:
-- создать обьекты типа GenericMethodsInGenericClassTwoParams <X, Y> с параметрами типа <String, String>, <String, Integer>, <String, Double>,  <Integer, Integer> и всеми типами, которые содержаться в пакете playground.essence, используя каждый из них хотя бы 1 раз
-- вызывать каждый из методов у каждого из обьектов, в случае, если метод возвратный - отпечатать возвращаемое им значение в консоль

продолжение задания по package playground.essence

Task 7:
- обновляем интерфейсы:
--ползающие имеют метод void crawl(String direction, int distance); - принимает строку направления движения и целое число растояния, и печатает в консоль фразу "I am N, my name is M and I am crawling to D for F units", где N - название класса соответствующего обьекта, М - значение name обьекта, D и F - значения передаваемых аргументов, при этом после проползания крокодил издает в консоль "wr-wr-wrr-r..", а жук "vz-vz-vzz-zz.."

- создаем классы:
-- package playground.utils
-- class DistanceGenerator
у него есть публичный статический метод generateDistance() - который генерирует случайное число от 1 (включая) до 100 (исключая), печатает в консоль строку "DistanceGenerator: I have generated distance with value: X", где Х - сгенерированное число, и возвращает это число
-- package playground.processors
-- class CrawlableProcessor

у него есть перегруженный публичный невозвратный метод:
runCrawlable(Crawlable crawlable) - принимает обьект ползающего и вызывает у него метод crawl, которому передает случайное направление, генерируемое вызовом метода generateDirection() из утилиты DirectionGenerator, и случайную дистанцию, генерируемую вызовом метода generateDistance() из утилиты DistanceGenerator
runCrawlable(Crawlable crawlable, String direction) - принимает обьект ползающего и строку направления, и вызывает у первого метод crawl, которому передает строку направления, переданную в качестве аргумента и случайную дистанцию, генерируемую вызовом метода generateDistance() из утилиты DistanceGenerator
runCrawlable(Crawlable crawlable, String direction, int distance) - принимает обьект ползающего, строку направления и число дистанции, и вызывает у первого метод crawl, которому передает направление и дистанцию, переданные в качестве аргумента

- выполняем код:
-- package playground.runners
-- class CrawlableProcessorRunner с методом main, в котором
-- создать обьект класса CrawlableProcessor
-- создать следующие обьекты:
Crawlable crawlableCrocodile = new Crocodile(1723, "Neel Crawlable");
Crawlable crawlableBeetle = new Beetle(43, "Christmas Crawlable");
Vertebrata vertebrataCrocodile = new Crocodile(1723, "Neel Vertebrata");
Insect insectBeetle = new Beetle(43, "Christmas Insect");
Crocodile aCrocodile = new Crocodile(1723, "Neel Crocodile");
Beetle aBeetle = new Beetle(43, "Christmas Beetle");
Crawlable anonymousCrawlable = new Crawlable() {
    String name = "Anonymous";
    @Override
    public void crawl(String direction, int distance) {
        System.out.printf("I am %s, my name is %s and I am crawling to %s for %d units%n",
            this.getClass().getSimpleName(), name, direction, distance);
    }
};
-- при помощи обьекта класса CrawlableProcessor запустить runCrawlable с каждым из обьектов из предыдущего пункта
-- в случае, если метод runCrawlable не смог принять на вход обьект, закомментировать вызов метода и добавить пояснение причины
-- при помощи обьекта класса CrawlableProcessor запустить runCrawlable с 2-мя любыми обьектами Crawlable и направлениями "никуда" и "налево"
-- при помощи обьекта класса CrawlableProcessor запустить runCrawlable с 1-м любым обьектом Crawlable, направлением "назад" и дистанцией 37
-- при помощи обьекта класса CrawlableProcessor запустить runCrawlable с анонимным обьектом Crawlable, который создается прямо в скобках вызываемого метода, направлением "вниз" и дистанцией 37


Task 8:
- обновляем интерфейсы:
--хранящие имеют метод void store(Pourable pourable,  int amount); - который принимает новый обьект льющегося и целое число количества, вызывает у льющегося метод spread и печатает в консоль фразу "I am N, my name is M and I received X of F", где N - название класса соответствующего обьекта, М - значение name обьекта, X - количество из аргумента, F - название класса переданного обьекта, при этом если количество льющегося оказалось больше массы хранящего, то после наполнения бутылка издает в консоль "wooh-wooh-wooh-hh..", а банка "waah-waah-waah-hh.."
--льющиеся имеют метод void spread(String storeName); - который принимает строку названия хранящего и печатает в консоль фразу "I am N and I am spreading in X", N - название класса соответствующего обьекта, X - строка из аргумента, при этом после этого бензин печатает в консоль "wheeh..", дизельное топливо - "whooh..", вода - "whobl-whobl.."

- создаем классы:

-- package playground.utils
-- class VolumeGenerator
у него есть публичный статический метод generateVolume(Pourable pourable) - который принимает аргумент льющегося типа генерирует случайное число обьема, которое в случае бензина или дизеля от 1 (включая) до 50 (исключая), а воды от 50 (включая) до 100 (исключая), и печатает в консоль строку "VolumeGenerator: I have generated volume of Х with value: Y", где Х - имя класса аргумента, Y - сгенерированное число, и возвращает это число
-- package playground.processors
-- class StorableProcessor

у него есть перегруженный публичный невозвратный метод:
runStorable(Storable storable, Pourable pourable) - принимает обьекты хранящего и льющегося, и вызывает у первого метод store, которому передает обьект льющегося и случайный обьем, генерируемый вызовом метода generateVolume() из утилиты VolumeGenerator
runStorable(Storable storable, Pourable pourable, int volume) - аналогичный метод, который принимает обьекты хранящего, льющегося и обьема

- выполняем код:
-- package playground.runners
-- class StorableProcessorRunner с методом main, в котором
-- создать обьект класса StorableProcessor
-- создать следующие обьекты:
первая группа:
Bottle bottle = new Bottle(23, "Glass");
Storable storableBottle = new Bottle(4, "Plastic");
Container containerBottle = new Bottle(78, "Metal");
Matter matterBottle = new Bottle(33, "Blue");
Can can = new Can(23, "Wooden");
Storable storableCan = new Can(82, "Small");
Container containerCan = new Can(54, "Big");
Matter matterCan = new Can(8, "Old");
вторая группа:
Petrol petrol = new Petrol(11);
Pourable pourablePetrol = new Petrol(65);
Pourable pourableDiesel = new Diesel(3);
Powerable powerableDiesel = new Diesel(87);
Matter matterPetrol = new Petrol(2);
Water water = new Water(34);
Pourable pourableWater = new Water(37);

-- при помощи обьекта класса StorableProcessor запустить runStorable со всеми парами обьектов (первая группа х вторая группа)
-- в случае, если метод runStorable не смог принять на вход обьект, закомментировать вызов метода и добавить пояснение причины

баббл проект - пока дописываем, если что-то осталось не законченным